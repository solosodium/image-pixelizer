var Pixelizer;!function(){class Bitmap{constructor(width,height,data){if(width*height*4!==data.length)throw new Error("Length of data doesn't match width and height");this.width=width,this.height=height,this.data=data}getPixelIndex(x,y){return x=Math.min(Math.max(0,x),this.width-1),y=Math.min(Math.max(0,y),this.height-1),4*(this.width*y+x)}}class Cluster{constructor(oldPixels,newPixels,options){this.oldPixels=oldPixels,this.newPixels=newPixels,this.options=options,this.labels=new Labels(oldPixels.width,oldPixels.height,options.pixelSize),this.permutations=[{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:-1,y:0},{x:0,y:0},{x:1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1}]}cluster(){for(let i=0;i<this.options.maxIteration;i++){var pixelChangeCount=this.map(),pixelChangeCount=(this.reduce(),pixelChangeCount/this.oldPixels.width/this.oldPixels.height);if(pixelChangeCount<this.options.clusterThreshold)break}return this}getPixels(){return this.newPixels}map(){let acc=0;for(let x=0;x<this.oldPixels.width;x++)for(let y=0;y<this.oldPixels.height;y++){let position,cost=Number.MAX_VALUE;for(let n=0;n<this.permutations.length;n++){var c,xx=Math.floor(x/this.options.pixelSize)+this.permutations[n].x,yy=Math.floor(y/this.options.pixelSize)+this.permutations[n].y;0<=xx&&xx<this.newPixels.width&&0<=yy&&yy<this.newPixels.height&&((c=this.pixelDifference(x,y,xx,yy))<cost&&(cost=c,position={x:xx,y:yy}))}this.labels.setLabel(x,y,position.x,position.y),acc+=this.labels.getLabel(x,y).changed?1:0}return acc}reduce(){for(let xx=0;xx<this.newPixels.width;xx++)for(let yy=0;yy<this.newPixels.height;yy++){var list=this.labels.getList(xx,yy);let aggregate=this.newPixels.getPixel(xx,yy);if(0<list.length){aggregate=RGBA.scale(aggregate,.5);for(let i=0;i<list.length;i++){var pos=list[i],pos=this.oldPixels.getPixel(pos.x,pos.y);aggregate=RGBA.add(aggregate,RGBA.scale(pos,1/list.length/2))}}this.newPixels.setPixel(xx,yy,aggregate)}}pixelDifference(x,y,xx,yy){var pixelSize=this.options.pixelSize,colorDistRatio=this.options.colorDistRatio,oldPixel=(x=Math.max(0,Math.min(x,this.oldPixels.width-1)),y=Math.max(0,Math.min(y,this.oldPixels.height-1)),xx=Math.max(0,Math.min(xx,this.newPixels.width-1)),yy=Math.max(0,Math.min(yy,this.newPixels.height-1)),this.oldPixels.getPixel(x,y)),newPixel=this.newPixels.getPixel(xx,yy),oldPixel=RGBA.difference(oldPixel,newPixel),newPixel=yy*pixelSize+(pixelSize-1)/2,yy=Math.abs(x-(xx*pixelSize+(pixelSize-1)/2)),x=Math.abs(y-newPixel);return colorDistRatio*oldPixel+(1-colorDistRatio)*Math.sqrt((yy*yy+x*x)/(pixelSize+1)/(pixelSize+1))}}class XYZA{constructor(rgba){var r=rgba.r/255,g=rgba.g/255,b=rgba.b/255,rgba=rgba.a/255;this.x=.4124564*r+.3575761*g+.1804375*b,this.y=.2126729*r+.7151522*g+.072175*b,this.z=.0193339*r+.119192*g+.9503041*b,this.a=rgba}}class LABAlpha{constructor(xyza){var e=.008856,k=903.3,x=xyza.x/.31271,y=xyza.y/.32902,z=xyza.z/.35827,xyza=255*xyza.a,x=e<x?Math.cbrt(x):(k*x+16)/116,y=e<y?Math.cbrt(y):(k*y+16)/116,e=e<z?Math.cbrt(z):(k*z+16)/116;this.l=116*y-16,this.a=500*(x-y),this.b=200*(y-e),this.alpha=xyza}}class RGBA{constructor(r,g,b,a){this.r=Math.min(Math.max(0,r),255),this.g=Math.min(Math.max(0,g),255),this.b=Math.min(Math.max(0,b),255),this.a=Math.min(Math.max(0,a),255)}copy(){return new RGBA(this.r,this.g,this.b,this.a)}toString(){return this.r,NaN+this.g+", "+this.b+", "+this.a+")"}static difference(c1,c2){c1=new LABAlpha(new XYZA(c1)),c2=new LABAlpha(new XYZA(c2));return(Math.abs(c1.l-c2.l)/100+Math.abs(c1.a-c2.a)/220+Math.abs(c1.b-c2.b)/220+Math.abs(c1.alpha-c2.alpha)/255)/4}static add(c1,c2){var r=c1.r+c2.r,g=c1.g+c2.g,b=c1.b+c2.b,c1=c1.a+c2.a;return new RGBA(r,g,b,c1)}static subtract(c1,c2){var r=c1.r-c2.r,g=c1.g-c2.g,b=c1.b-c2.b,c1=c1.a-c2.a;return new RGBA(r,g,b,c1)}static scale(c,val){var r=c.r*val,g=c.g*val,b=c.b*val,c=c.a*val;return new RGBA(r,g,b,c)}static zero(){return new RGBA(0,0,0,0)}static length(c){return Math.sqrt(c.r*c.r+c.g*c.g+c.b*c.b+c.a*c.a)}}class Labels{constructor(width,height,size){this.oldWidth=width,this.oldHeight=height,this.size=size,this.newWidth=Math.ceil(this.oldWidth/this.size),this.newHeight=Math.ceil(this.oldHeight/this.size),this.labels=Array(this.oldWidth).fill().map(()=>Array(this.oldHeight)),this.lists=Array(this.newWidth).fill().map(()=>Array(this.newHeight).fill().map(()=>Array(0)));for(let x=0;x<this.oldWidth;x++)for(let y=0;y<this.oldHeight;y++){var xx=Math.floor(x/size),yy=Math.floor(y/size);this.labels[x][y]={x:xx,y:yy,changed:!0},this.lists[xx][yy].push({x:x,y:y})}}getLabel(x,y){return x=Math.max(0,Math.min(x,this.oldWidth-1)),y=Math.max(0,Math.min(y,this.oldHeight-1)),this.labels[x][y]}setLabel(x,y,xx,yy){x=Math.max(0,Math.min(x,this.oldWidth-1)),y=Math.max(0,Math.min(y,this.oldHeight-1)),xx=Math.max(0,Math.min(xx,this.newWidth-1)),yy=Math.max(0,Math.min(yy,this.newHeight-1));var label=this.getLabel(x,y),pos={x:x,y:y},idx=this.lists[label.x][label.y].findIndex(pos=>pos.x==x&&pos.y==y),idx=(-1<idx&&(this.lists[label.x][label.y].splice(idx,1),this.lists[xx][yy].push(pos)),label.x!==xx||label.y!==yy);this.labels[x][y]={x:xx,y:yy,changed:idx}}getList(xx,yy){return xx=Math.max(0,Math.min(xx,this.newWidth-1)),yy=Math.max(0,Math.min(yy,this.newHeight-1)),this.lists[xx][yy]}}class Palette{constructor(pixels,options){this.pixels=pixels,this.options=options,this.colors=pixels.pixels,this.groups=[]}reduce(){if(this.options.numberOfColors<=0)return this.pixels;for(this.initGroups();this.groups.length<this.options.numberOfColors;){this.splitGroups();let iter=0,change=2;for(;iter<1e5&&change>this.options.clusterThreshold;)change=this.assignGroups(),this.updateGroups(),iter++}return this.map(),this.pixels}initGroups(){this.groups.push({mean:RGBA.zero(),sd:RGBA.zero(),oldList:[],newList:[]})}assignGroups(){let colorChanged=0;for(let i=0;i<this.colors.length;i++){let minDiff=Number.MAX_VALUE,groupIndex=-1;for(let j=0;j<this.groups.length;j++){var diff=RGBA.difference(this.groups[j].mean,this.colors[i]);diff<minDiff&&(minDiff=diff,groupIndex=j)}this.groups[groupIndex].newList.push(this.colors[i]),this.groups[groupIndex].oldList.indexOf(this.colors[i])<0&&colorChanged++}for(let i=0;i<this.groups.length;i++)this.groups[i].oldList=this.groups[i].newList,this.groups[i].newList=[];return colorChanged/this.colors.length}updateGroups(){for(let i=0;i<this.groups.length;i++){let aggregate=RGBA.zero(),r2=0,g2=0,b2=0,a2=0;var length=this.groups[i].oldList.length;for(let j=0;j<length;j++){var color=this.groups[i].oldList[j];aggregate=RGBA.add(aggregate,RGBA.scale(color,1/length)),r2+=color.r*color.r/length,g2+=color.g*color.g/length,b2+=color.b*color.b/length,a2+=color.a*color.a/length}this.groups[i].mean=aggregate,this.groups[i].sd=new RGBA(Math.sqrt(Math.max(0,r2-aggregate.r*aggregate.r)),Math.sqrt(Math.max(0,g2-aggregate.g*aggregate.g)),Math.sqrt(Math.max(0,b2-aggregate.b*aggregate.b)),Math.sqrt(Math.max(0,a2-aggregate.a*aggregate.a)))}}splitGroups(){let maxSd=-1,group=null;for(let i=0;i<this.groups.length;i++)RGBA.length(this.groups[i].sd)>=maxSd&&(maxSd=RGBA.length(this.groups[i].sd),group=this.groups[i]);this.groups.splice(this.groups.indexOf(group),1),this.groups.push({mean:RGBA.subtract(group.mean,group.sd),sd:RGBA.zero(),oldList:[],newList:[]}),this.groups.push({mean:RGBA.add(group.mean,group.sd),sd:RGBA.zero(),oldList:[],newList:[]})}map(){for(let x=0;x<this.pixels.width;x++)for(let y=0;y<this.pixels.height;y++){let minDiff=Number.MAX_VALUE,closestColor=this.pixels.getPixel(x,y);for(let i=0;i<this.groups.length;i++){var diff=RGBA.difference(this.pixels.getPixel(x,y),this.groups[i].mean);diff<=minDiff&&(minDiff=diff,closestColor=this.groups[i].mean)}this.pixels.setPixel(x,y,closestColor)}}}class Pixels{constructor(width,height,size,bitmap){if(this.width=width,this.height=height,width*(this.size=size)>bitmap.width)throw new Error("invalid width combination, width("+width+"), size("+size+"), bitmap width("+bitmap.width+")");if(height*size>bitmap.height)throw new Error("invalid height combination, height("+height+"), size("+size+"), bitmap height("+bitmap.height+")");this.pixels=[];for(let x=0;x<this.width;x++)for(let y=0;y<this.height;y++){let r=0,g=0,b=0,a=0;for(let i=0;i<size;i++)for(let j=0;j<size;j++){var xx=x*size+i,yy=y*size+j,xx=bitmap.getPixelIndex(xx,yy);r+=bitmap.data[xx+0]/size/size,g+=bitmap.data[xx+1]/size/size,b+=bitmap.data[xx+2]/size/size,a+=bitmap.data[xx+3]/size/size}this.pixels[y*width+x]=new RGBA(r,g,b,a)}}getPixel(x,y){if(x<0||x>this.width-1)throw new Error("x ("+x+") is not in bound");if(y<0||y>this.height-1)throw new Error("y ("+y+") is not in bound");return this.pixels[y*this.width+x]}setPixel(x,y,rgba){if(x<0||x>this.width-1)throw new Error("x ("+x+") is not in bound");if(y<0||y>this.height-1)throw new Error("y ("+y+") is not in bound");this.pixels[y*this.width+x]=rgba}toBitmap(){let data=[];for(let y=0;y<this.height;y++)for(let x=0;x<this.width;x++){var rgba=this.getPixel(x,y);data.push(rgba.r),data.push(rgba.g),data.push(rgba.b),data.push(rgba.a)}return new Bitmap(this.width,this.height,data)}}class _Pixelizer{constructor(bitmap,options){this.options=options,this.oldPixels=this.createPixels(bitmap,1),this.newPixels=this.createPixels(bitmap,options.pixelSize)}updateOptions(options){this.options=options,this.newPixels=this.createPixels(bitmap,options.pixelSize)}pixelize(){let cluster=new Cluster(this.oldPixels,this.newPixels,this.options),palette=(cluster.cluster(),new Palette(cluster.getPixels(),this.options)),reducedPixels=palette.reduce();return reducedPixels.toBitmap()}createPixels(bitmap,size){var width=bitmap.width,height=bitmap.height,width=Math.floor(width/size),height=Math.floor(height/size);return new Pixels(width,height,size,bitmap)}}_Pixelizer.Options=class{constructor(){return this.pixelSize=1,this.colorDistRatio=.5,this.clusterThreshold=.01,this.maxIteration=10,this.numberOfColors=128,this}setPixelSize(size){return this.pixelSize=size,this}setColorDistRatio(ratio){return this.colorDistRatio=Math.max(0,Math.min(ratio,1)),this}setClusterThreshold(threshold){return this.clusterThreshold=Math.max(0,Math.min(threshold,1)),this}setMaxIteration(iteration){return this.maxIteration=iteration,this}setNumberOfColors(number){return this.numberOfColors=parseInt(number),this}},_Pixelizer.Bitmap=Bitmap,_Pixelizer.RGBA=RGBA,Pixelizer=_Pixelizer}();