var Pixelizer;!function(){class t{constructor(t,i,s){if(t*i*4!==s.length)throw new Error("Length of data doesn't match width and height");this.width=t,this.height=i,this.data=s}getPixelIndex(t,i){return t=Math.min(Math.max(0,t),this.width-1),i=Math.min(Math.max(0,i),this.height-1),4*(this.width*i+t)}}class h{constructor(t,i,s){this.oldPixels=t,this.newPixels=i,this.options=s,this.labels=new e(t.width,t.height,s.pixelSize),this.permutations=[{x:-1,y:-1},{x:0,y:-1},{x:1,y:-1},{x:-1,y:0},{x:0,y:0},{x:1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1}]}cluster(){for(let t=0;t<this.options.maxIteration;t++){var i=this.map(),i=(this.reduce(),i/this.oldPixels.width/this.oldPixels.height);if(i<this.options.clusterThreshold)break}return this}getPixels(){return this.newPixels}map(){let t=0;for(let e=0;e<this.oldPixels.width;e++)for(let h=0;h<this.oldPixels.height;h++){let i,s=Number.MAX_VALUE;for(let t=0;t<this.permutations.length;t++){var r,a=Math.floor(e/this.options.pixelSize)+this.permutations[t].x,l=Math.floor(h/this.options.pixelSize)+this.permutations[t].y;0<=a&&a<this.newPixels.width&&0<=l&&l<this.newPixels.height&&((r=this.pixelDifference(e,h,a,l))<s&&(s=r,i={x:a,y:l}))}this.labels.setLabel(e,h,i.x,i.y),t+=this.labels.getLabel(e,h).changed?1:0}return t}reduce(){for(let s=0;s<this.newPixels.width;s++)for(let t=0;t<this.newPixels.height;t++){var h=this.labels.getList(s,t);let i=this.newPixels.getPixel(s,t);if(0<h.length){i=g.scale(i,.5);for(let t=0;t<h.length;t++){var e=h[t],e=this.oldPixels.getPixel(e.x,e.y);i=g.add(i,g.scale(e,1/h.length/2))}}this.newPixels.setPixel(s,t,i)}}pixelDifference(t,i,s,h){var e=this.options.pixelSize,r=this.options.colorDistRatio,a=(t=Math.max(0,Math.min(t,this.oldPixels.width-1)),i=Math.max(0,Math.min(i,this.oldPixels.height-1)),s=Math.max(0,Math.min(s,this.newPixels.width-1)),h=Math.max(0,Math.min(h,this.newPixels.height-1)),this.oldPixels.getPixel(t,i)),l=this.newPixels.getPixel(s,h),a=g.difference(a,l),l=h*e+(e-1)/2,h=Math.abs(t-(s*e+(e-1)/2)),t=Math.abs(i-l);return r*a+(1-r)*Math.sqrt((h*h+t*t)/(e+1)/(e+1))}}class r{constructor(t){var i=t.r/255,s=t.g/255,h=t.b/255,t=t.a/255;this.x=.4124564*i+.3575761*s+.1804375*h,this.y=.2126729*i+.7151522*s+.072175*h,this.z=.0193339*i+.119192*s+.9503041*h,this.a=t}}class a{constructor(t){var i=.008856,s=t.x/.31271,h=t.y/.32902,e=t.z/.35827,t=255*t.a,s=i<s?Math.cbrt(s):(903.3*s+16)/116,h=i<h?Math.cbrt(h):(903.3*h+16)/116,i=i<e?Math.cbrt(e):(903.3*e+16)/116;this.l=116*h-16,this.a=500*(s-h),this.b=200*(h-i),this.alpha=t}}class g{constructor(t,i,s,h){this.r=Math.min(Math.max(0,t),255),this.g=Math.min(Math.max(0,i),255),this.b=Math.min(Math.max(0,s),255),this.a=Math.min(Math.max(0,h),255)}copy(){return new g(this.r,this.g,this.b,this.a)}toString(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.a+")"}static difference(t,i){var t=new a(new r(t)),i=new a(new r(i)),s=Math.abs(t.l-i.l),h=Math.abs(t.a-i.a),e=Math.abs(t.b-i.b),t=Math.abs(t.alpha-i.alpha);return Math.sqrt(s*s+h*h+e*e+t*t)/453}static add(t,i){var s=t.r+i.r,h=t.g+i.g,e=t.b+i.b,t=t.a+i.a;return new g(s,h,e,t)}static subtract(t,i){var s=t.r-i.r,h=t.g-i.g,e=t.b-i.b,t=t.a-i.a;return new g(s,h,e,t)}static scale(t,i){var s=t.r*i,h=t.g*i,e=t.b*i,t=t.a*i;return new g(s,h,e,t)}static zero(){return new g(0,0,0,0)}static length(t){return Math.sqrt(t.r*t.r+t.g*t.g+t.b*t.b+t.a*t.a)}}class e{constructor(t,i,s){this.oldWidth=t,this.oldHeight=i,this.size=s,this.newWidth=Math.ceil(this.oldWidth/this.size),this.newHeight=Math.ceil(this.oldHeight/this.size),this.labels=Array(this.oldWidth).fill().map(()=>Array(this.oldHeight)),this.lists=Array(this.newWidth).fill().map(()=>Array(this.newHeight).fill().map(()=>Array(0)));for(let i=0;i<this.oldWidth;i++)for(let t=0;t<this.oldHeight;t++){var h=Math.floor(i/s),e=Math.floor(t/s);this.labels[i][t]={x:h,y:e,changed:!0},this.lists[h][e].push({x:i,y:t})}}getLabel(t,i){return t=Math.max(0,Math.min(t,this.oldWidth-1)),i=Math.max(0,Math.min(i,this.oldHeight-1)),this.labels[t][i]}setLabel(i,s,t,h){i=Math.max(0,Math.min(i,this.oldWidth-1)),s=Math.max(0,Math.min(s,this.oldHeight-1)),t=Math.max(0,Math.min(t,this.newWidth-1)),h=Math.max(0,Math.min(h,this.newHeight-1));var e=this.getLabel(i,s),r={x:i,y:s},a=this.lists[e.x][e.y].findIndex(t=>t.x==i&&t.y==s),a=(-1<a&&(this.lists[e.x][e.y].splice(a,1),this.lists[t][h].push(r)),e.x!==t||e.y!==h);this.labels[i][s]={x:t,y:h,changed:a}}getList(t,i){return t=Math.max(0,Math.min(t,this.newWidth-1)),i=Math.max(0,Math.min(i,this.newHeight-1)),this.lists[t][i]}}class l{constructor(t,i){this.pixels=t,this.options=i,this.colors=t.pixels,this.groups=[]}reduce(){if(this.options.numberOfColors<=0)return this.pixels;for(this.initGroups();this.groups.length<this.options.numberOfColors;){this.splitGroups();let t=0,i=2;for(;t<1e5&&i>this.options.clusterThreshold;)i=this.assignGroups(),this.updateGroups(),t++}return this.map(),this.pixels}initGroups(){this.groups.push({mean:g.zero(),sd:g.zero(),oldList:[],newList:[]})}assignGroups(){let t=0;for(let h=0;h<this.colors.length;h++){let i=Number.MAX_VALUE,s=-1;for(let t=0;t<this.groups.length;t++){var e=g.difference(this.groups[t].mean,this.colors[h]);e<i&&(i=e,s=t)}this.groups[s].newList.push(this.colors[h]),this.groups[s].oldList.indexOf(this.colors[h])<0&&t++}for(let t=0;t<this.groups.length;t++)this.groups[t].oldList=this.groups[t].newList,this.groups[t].newList=[];return t/this.colors.length}updateGroups(){for(let a=0;a<this.groups.length;a++){let i=g.zero(),s=0,h=0,e=0,r=0;var l=this.groups[a].oldList.length;for(let t=0;t<l;t++){var o=this.groups[a].oldList[t];i=g.add(i,g.scale(o,1/l)),s+=o.r*o.r/l,h+=o.g*o.g/l,e+=o.b*o.b/l,r+=o.a*o.a/l}this.groups[a].mean=i,this.groups[a].sd=new g(Math.sqrt(Math.max(0,s-i.r*i.r)),Math.sqrt(Math.max(0,h-i.g*i.g)),Math.sqrt(Math.max(0,e-i.b*i.b)),Math.sqrt(Math.max(0,r-i.a*i.a)))}}splitGroups(){let i=-1,s=null;for(let t=0;t<this.groups.length;t++)g.length(this.groups[t].sd)>=i&&(i=g.length(this.groups[t].sd),s=this.groups[t]);this.groups.splice(this.groups.indexOf(s),1),this.groups.push({mean:g.subtract(s.mean,s.sd),sd:g.zero(),oldList:[],newList:[]}),this.groups.push({mean:g.add(s.mean,s.sd),sd:g.zero(),oldList:[],newList:[]})}map(){for(let e=0;e<this.pixels.width;e++)for(let h=0;h<this.pixels.height;h++){let i=Number.MAX_VALUE,s=this.pixels.getPixel(e,h);for(let t=0;t<this.groups.length;t++){var r=g.difference(this.pixels.getPixel(e,h),this.groups[t].mean);r<=i&&(i=r,s=this.groups[t].mean)}this.pixels.setPixel(e,h,s)}}}class o{constructor(t,i,o,n){if(this.width=t,this.height=i,t*(this.size=o)>n.width)throw new Error("invalid width combination, width("+t+"), size("+o+"), bitmap width("+n.width+")");if(i*o>n.height)throw new Error("invalid height combination, height("+i+"), size("+o+"), bitmap height("+n.height+")");this.pixels=[];for(let l=0;l<this.width;l++)for(let a=0;a<this.height;a++){let s=0,h=0,e=0,r=0;for(let i=0;i<o;i++)for(let t=0;t<o;t++){var x=l*o+i,d=a*o+t,x=n.getPixelIndex(x,d);s+=n.data[x+0]/o/o,h+=n.data[x+1]/o/o,e+=n.data[x+2]/o/o,r+=n.data[x+3]/o/o}this.pixels[a*t+l]=new g(s,h,e,r)}}getPixel(t,i){if(t<0||t>this.width-1)throw new Error("x ("+t+") is not in bound");if(i<0||i>this.height-1)throw new Error("y ("+i+") is not in bound");return this.pixels[i*this.width+t]}setPixel(t,i,s){if(t<0||t>this.width-1)throw new Error("x ("+t+") is not in bound");if(i<0||i>this.height-1)throw new Error("y ("+i+") is not in bound");this.pixels[i*this.width+t]=s}toBitmap(){let s=[];for(let i=0;i<this.height;i++)for(let t=0;t<this.width;t++){var h=this.getPixel(t,i);s.push(h.r),s.push(h.g),s.push(h.b),s.push(h.a)}return new t(this.width,this.height,s)}}class i{constructor(t,i){this.options=i,this.oldPixels=this.createPixels(t,1),this.newPixels=this.createPixels(t,i.pixelSize)}updateOptions(t){this.options=t,this.newPixels=this.createPixels(bitmap,t.pixelSize)}pixelize(){let t=new h(this.oldPixels,this.newPixels,this.options),i=(t.cluster(),new l(t.getPixels(),this.options)),s=i.reduce();return s.toBitmap()}createPixels(t,i){var s=t.width,h=t.height,s=Math.floor(s/i),h=Math.floor(h/i);return new o(s,h,i,t)}}i.Options=class{constructor(){return this.pixelSize=1,this.colorDistRatio=.5,this.clusterThreshold=.01,this.maxIteration=10,this.numberOfColors=128,this}setPixelSize(t){return this.pixelSize=t,this}setColorDistRatio(t){return this.colorDistRatio=Math.max(0,Math.min(t,1)),this}setClusterThreshold(t){return this.clusterThreshold=Math.max(0,Math.min(t,1)),this}setMaxIteration(t){return this.maxIteration=t,this}setNumberOfColors(t){return this.numberOfColors=parseInt(t),this}},i.Bitmap=t,i.RGBA=g,Pixelizer=i}();